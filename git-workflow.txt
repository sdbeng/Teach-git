BASIC GIT WORKFLOW
Hello Git
Git is a software that allows you to keep track of changes made to a project over time. Git works by recording the changes you make to a project, storing those changes, then allowing you to reference them as needed.

## git init
Then we turn the directory into a Git project by doing:
>git init

The work init means initialize. This command sets up all the tools Git needs to begin tracking changes made to the project.

## Git workflow
A Git project can be thought of as having three parts:

A Working Directory: where you'll be doing all the work: creating, editing, deleting and organizing files
A Staging Area: where you'll list changes you make to the working directory
A Repository: where Git permanently stores those changes as different versions of the project.

The Git workflow consists of editing files in the working directory,
+additions
-deletions
modifications

Adding files to the staging area - bring changes to staging area

 and saving changes to a Git repository. In Git, we save changes with a commit, which we will learn next.

## git status
As we change the contents in the working directory, you check the status with git status.

You'll see the untracked files. Untrack means that Git sees the file but has not started tracking changes yet.

## git add
In order for Git to start tracking, i need to add the file(s) to the staging area. I use:
 git add.
CHeck it out with git status and will see the file was added to the staging area.

## git diff
Use it to check the differences between the working directory and staging area.

##git commit
A commit is the last step in our Git workflow. A commit permanently stores changes from the staging area inside the repository.

git commit is the command we'll do next. However, one more bit of code is needed for a commit: the option -m followed by a message. Here's an example:

git commit -m "Complete first line of dialogue"
Standard Conventions for Commit Messages:

Must be in quotation marks
Written in the present tense
Should be brief (50 characters or less) when using -m

##git log
Often with Git, you'll need to refer back to an earlier version of a project. Commits are stored chronologically in the repository and can be viewed with:
git log

In the output, notice:

A 40-character code, called a SHA, that uniquely identifies the commit. This appears in orange text.
The commit author (you!)
The date and time of the commit
The commit message

## Review
Let's take a moment to generalize:

Git is the industry-standard version control system for web developers
Use Git commands to help keep track of changes made to a project:
git init creates a new Git repository
git status inspects the contents of the working directory and staging area
git add adds files from the working directory to the staging area
git diff shows the difference between the working directory and the staging area
git commit permanently stores file changes from the staging area in the repository
git log shows a list of all previous commits


